swagger: '2.0'
info:
  description: |
    This is a test application for OpenSolutions
  version: 1.0.0
  # put the contact info for your development or API team
  contact:
    email: da070116@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Test task for OpenSolutions
  
  
# tags are used for organizing operations
tags:
- name: admin
  description: Enter to the Django admin database
- name: orders
  description: Operations available with order list
- name: users
  description: Operations with users list

paths:
  /admin:
    get:
      tags:
      - orders
      summary: Admin panel
      responses: 
        200:
          description: successfull 
  /orders/create:
    post:
      tags:
      - orders
      summary: Create a new order
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      responses: 
        200:
          description: successfull 
        401:
          description: Authentication credentials were not provided
      security:
      - my_auth:
        - write:orders
  /orders/list:
    get:
      tags:
      - orders
      summary: Obtain a list of orders
      produces:
      - application/json
      - application/xml
      responses: 
        200:
          description: successfull 
        401:
          description: Authentication credentials were not provided
      security:
      - my_auth:
        - read:orders
  /orders/detail/{orderId}:
    parameters:
      - in: path
        name: orderId 
        required: true
        type: integer
        description: The order ID
    get:
      tags:
      - orders
      summary: Detailed view of the order
      consumes:
      - application/json
      - application/xml
      parameters:
      - name: orderId
        in: path
        description: ID of order to return
        required: true
        type: integer
        format: int64
      produces:
      - application/json
      - application/xml
      responses: 
        200:
          description: successfull 
        401:
          description: unautorized  
        404:
          description: not found
      security:
      - my_auth:
        - read:orders

  /orders/manage/{orderId}:
    parameters:
      - in: path
        name: orderId 
        required: true
        type: integer
        description: The order ID
    put:
      tags:
      - orders
      summary: Set permissions to an order
      consumes:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Order permission
        required: true
        schema: 
          $ref: "#/definitions/Order"
      produces:
      - application/json
      - application/xml
      responses: 
        200:
          description: successfull 
        401:
          description: unautorized  
        404:
          description: not found
      security:
      - my_auth:
        - modify:orders

  /user/register:
    post:
      tags:
      - user
      summary: Register new user
      operationId: createNewUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/list:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
        401: 
          description: Authentication credentials were not provided
      security:
      - my_auth:
          - read:users
  /user/auth/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: email
        in: query
        description: The email for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            schema:
              type: string
        400:
          description: Invalid username/password supplied
      security:
      - my_auth:
          - read:users
  /user/auth/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
      security:
      - my_auth:
          - read:users
  /user/auth/user:
    get:
      tags:
      - user
      summary: Get data of current user
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        401:
          description: Not registerred
        404:
          description: User not found
      security:
      - my_auth:
        - read:users

securityDefinitions:
  my_auth:
    type: oauth2
    authorizationUrl: http://127.0.0.1:8000/users/auth/login/
    flow: implicit
    scopes:
      write:users: modify users
      read:users: read users
      write:orders: create orders
      modify:orders: modify orders
      read:orders: read orders 
 
definitions:
  UserId:
    type: integer
    format: int64
    description:  Foreign key to link Order to a User
  Order: 
    required: [date, person, reason]
    properties:
      id:
        type: integer
        format: int64
      date:
        type: string
      person:
        $ref: "#/definitions/UserId"
      reason:
        type: string
        maxLength: 255
      answer:
        type: string
        enum: ['undefined', 'allowed', 'restricted']
        default: 'undefined'
    description: Represents a query for enter on defined date
  User:
    required: [username, password, email, token]
    properties:
      id:
         $ref: "#/definitions/UserId"
      username:
        type: string
      password:
        type: string
      email:
        type: string
      groups:
        type: array
        default: none
        description: List of existed groups in database (in fact, Managers or none)
    description: Abstract model represents registered users (both Visitors and Managers)

    
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /da070116/test_task/1.0.0
schemes:
 - https